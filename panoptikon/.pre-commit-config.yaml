repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=500']
      - id: check-ast
      - id: check-json
      - id: check-merge-conflict
      - id: detect-private-key
      - id: mixed-line-ending
        args: ['--fix=lf']

  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3

  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.0.262
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.2.0
    hooks:
      - id: mypy
        additional_dependencies: [types-requests, pydantic]

  - repo: local
    hooks:
      - id: check-file-length
        name: check file length
        entry: python -c 'import sys; file = sys.argv[1]; content = open(file).readlines(); sys.exit(1 if len(content) > 500 else 0)'
        language: python
        types: [python]

      - id: check-docstring-coverage
        name: check docstring coverage
        entry: python -c 'import sys, ast; file = sys.argv[1]; tree = ast.parse(open(file).read()); classes = [node for node in ast.walk(tree) if isinstance(node, ast.ClassDef)]; functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef) or isinstance(node, ast.AsyncFunctionDef)]; public_classes = [c for c in classes if not c.name.startswith("_")]; public_functions = [f for f in functions if not f.name.startswith("_")]; all_public = public_classes + public_functions; missing_docs = [n for n in all_public if not ast.get_docstring(n)]; sys.exit(1 if missing_docs else 0)'
        language: python
        types: [python]
        exclude: '^tests/' 