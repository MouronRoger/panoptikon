============================= test session starts ==============================
platform darwin -- Python 3.9.18, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/james/Documents/GitHub/panoptikon
configfile: pyproject.toml
testpaths: tests
plugins: anyio-4.9.0, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=strict, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
collected 381 items

tests/core/test_bookmarks.py ...................                         [  4%]
tests/core/test_bootstrap.py .                                           [  5%]
tests/core/test_cloud_storage.py ...............                         [  9%]
tests/core/test_config.py .......                                        [ 11%]
tests/core/test_config_hot_reload.py ......s...                          [ 13%]
tests/core/test_database_connection.py .......                           [ 15%]
tests/core/test_database_schema.py ......................                [ 21%]
tests/core/test_database_service.py ...................                  [ 26%]
tests/core/test_db_pool.py ......................                        [ 32%]
tests/core/test_db_pool_service.py .....................                 [ 37%]
tests/core/test_errors.py .........                                      [ 39%]
tests/core/test_events.py ........................                       [ 46%]
tests/core/test_filesystem.py ................                           [ 50%]
tests/core/test_filesystem_access.py ............................        [ 57%]
tests/core/test_filesystem_watcher.py ..........................sss...   [ 66%]
tests/core/test_filtering.py ..........                                  [ 68%]
tests/core/test_integration.py ..                                        [ 69%]
tests/core/test_lifecycle.py .........                                   [ 71%]
tests/core/test_paths.py ........                                        [ 73%]
tests/core/test_query_parser.py ............                             [ 76%]
tests/core/test_search_engine.py ..................                      [ 81%]
tests/core/test_service.py .........                                     [ 83%]
tests/core/test_sorting.py ..FFFF...                                     [ 86%]
tests/core/test_sorting_benchmark.py F                                   [ 86%]
tests/core/test_ui.py .......                                            [ 88%]
tests/test_core.py .                                                     [ 88%]
tests/test_main.py ...                                                   [ 89%]
tests/test_search/test_sorting_performance.py F                          [ 89%]
tests/ui/test_macos_app.py ........                                      [ 91%]
tests/ui/test_macos_app_extended.py .....                                [ 93%]
tests/ui/test_objc_integration.py ....                                   [ 94%]
tests/ui/test_ui_integration.py FFFFFFFFF                                [ 96%]
tests/ui/test_ui_mocking.py ....                                         [ 97%]
tests/ui/test_validators.py .........                                    [100%]

=================================== FAILURES ===================================
____________________________ test_sort_by_size_asc _____________________________

dummy_results = [<tests.core.test_sorting.DummyResult object at 0x10e3d5760>, <tests.core.test_sorting.DummyResult object at 0x10e3d59...ests.core.test_sorting.DummyResult object at 0x10e3d5040>, <tests.core.test_sorting.DummyResult object at 0x10e3d5dc0>]

    def test_sort_by_size_asc(dummy_results: List[SearchResult]) -> None:
        engine = SortingEngine()
        sorted_results = engine.apply_sort(
            dummy_results, AttributeSortCriteria("size"), "asc"
        )
>       assert [r.name for r in sorted_results][:3] == ["d", "c.md", "b.txt"]
E       AssertionError: assert ['a.txt', 'b.txt', 'c.md'] == ['d', 'c.md', 'b.txt']
E         
E         At index 0 diff: 'a.txt' != 'd'
E         Use -v to get more diff

tests/core/test_sorting.py:86: AssertionError
____________________________ test_sort_by_size_desc ____________________________

dummy_results = [<tests.core.test_sorting.DummyResult object at 0x10e39bb80>, <tests.core.test_sorting.DummyResult object at 0x10e39b6...ests.core.test_sorting.DummyResult object at 0x10e39b5e0>, <tests.core.test_sorting.DummyResult object at 0x10e39bc10>]

    def test_sort_by_size_desc(dummy_results: List[SearchResult]) -> None:
        engine = SortingEngine()
        sorted_results = engine.apply_sort(
            dummy_results, AttributeSortCriteria("size"), "desc"
        )
>       assert [r.name for r in sorted_results][0] == "e"
E       AssertionError: assert 'a.txt' == 'e'
E         
E         - e
E         + a.txt

tests/core/test_sorting.py:94: AssertionError
_________________________ test_sort_by_folder_size_asc _________________________

dummy_results = [<tests.core.test_sorting.DummyResult object at 0x10ee77fd0>, <tests.core.test_sorting.DummyResult object at 0x10ee77c...ests.core.test_sorting.DummyResult object at 0x10ee778b0>, <tests.core.test_sorting.DummyResult object at 0x10ee77a60>]

    def test_sort_by_folder_size_asc(dummy_results: List[SearchResult]) -> None:
        engine = SortingEngine()
        sorted_results = engine.apply_sort(dummy_results, FolderSizeSortCriteria(), "asc")
        # d (500), a.txt (1000), b.txt (2000), c.md (None), e (None)
>       assert [r.name for r in sorted_results][:3] == ["d", "a.txt", "b.txt"]
E       AssertionError: assert ['c.md', 'e', 'd'] == ['d', 'a.txt', 'b.txt']
E         
E         At index 0 diff: 'c.md' != 'd'
E         Use -v to get more diff

tests/core/test_sorting.py:101: AssertionError
________________________ test_sort_by_folder_size_desc _________________________

dummy_results = [<tests.core.test_sorting.DummyResult object at 0x10e7149a0>, <tests.core.test_sorting.DummyResult object at 0x10e7143...ests.core.test_sorting.DummyResult object at 0x10e714580>, <tests.core.test_sorting.DummyResult object at 0x10e714250>]

    def test_sort_by_folder_size_desc(dummy_results: List[SearchResult]) -> None:
        engine = SortingEngine()
        sorted_results = engine.apply_sort(dummy_results, FolderSizeSortCriteria(), "desc")
>       assert [r.name for r in sorted_results][0] == "b.txt"
E       AssertionError: assert 'c.md' == 'b.txt'
E         
E         - b.txt
E         + c.md

tests/core/test_sorting.py:107: AssertionError
__________________ test_sorting_performance_mock_data[10000] ___________________

n = 10000

    @pytest.mark.parametrize("n", [10_000])
    def test_sorting_performance_mock_data(n: int) -> None:
        engine = SortingEngine()
        results = generate_mock_results(n)
        # Sort by name
        t0 = time.perf_counter()
        engine.apply_sort(results, AttributeSortCriteria("name"), "asc")
        t1 = time.perf_counter()
        # Sort by size
        engine.apply_sort(results, AttributeSortCriteria("size"), "asc")
        t2 = time.perf_counter()
        # Sort by date
        engine.apply_sort(results, AttributeSortCriteria("date_created"), "asc")
        t3 = time.perf_counter()
        # Sort by folder size
        engine.apply_sort(results, FolderSizeSortCriteria(), "asc")
        t4 = time.perf_counter()
        # Multi-key sort (extension, then name)
        engine.apply_sort(
            results,
            [AttributeSortCriteria("extension"), AttributeSortCriteria("name")],
            "asc",
        )
        t5 = time.perf_counter()
        print(f"Sort by name: {1000 * (t1 - t0):.2f} ms")
        print(f"Sort by size: {1000 * (t2 - t1):.2f} ms")
        print(f"Sort by date: {1000 * (t3 - t2):.2f} ms")
        print(f"Sort by folder size: {1000 * (t4 - t3):.2f} ms")
        print(f"Sort by extension+name: {1000 * (t5 - t4):.2f} ms")
>       assert (t1 - t0) < 0.1, f"Sort by name took too long: {t1 - t0:.3f}s"
E       AssertionError: Sort by name took too long: 0.111s
E       assert (47.528298125 - 47.416903416) < 0.1

tests/core/test_sorting_benchmark.py:105: AssertionError
----------------------------- Captured stdout call -----------------------------
Sort by name: 111.39 ms
Sort by size: 48.54 ms
Sort by date: 29.12 ms
Sort by folder size: 85.57 ms
Sort by extension+name: 170.31 ms
________________________ test_sorting_performance_live _________________________

    @pytest.mark.skipif(
        len(collect_filesystem_data(str(Path.home()), 10000)) < 10000,
        reason="Not enough files for live sorting performance test",
    )
    def test_sorting_performance_live() -> None:
        files = collect_filesystem_data(str(Path.home()), 20000)
        engine = SortingEngine()
        sort_criteria_list = [
            ("Sort by name (asc)", AttributeSortCriteria("name"), "asc"),
            ("Sort by name (desc)", AttributeSortCriteria("name"), "desc"),
            ("Sort by date_modified (asc)", AttributeSortCriteria("date_modified"), "asc"),
            (
                "Sort by date_modified (desc)",
                AttributeSortCriteria("date_modified"),
                "desc",
            ),
            ("Sort by size (asc)", AttributeSortCriteria("size"), "asc"),
            ("Sort by size (desc)", AttributeSortCriteria("size"), "desc"),
            ("Sort by folder size (asc)", FolderSizeSortCriteria(), "asc"),
            ("Sort by folder size (desc)", FolderSizeSortCriteria(), "desc"),
            (
                "Sort by directory+name (asc)",
                [AttributeSortCriteria("file_type"), AttributeSortCriteria("name")],
                "asc",
            ),
        ]
        results = run_sorting_benchmark(files, engine, sort_criteria_list, iterations=5)
        for sort_name, stats in results.items():
>           assert stats["mean"] <= 100, (
                f"{sort_name} exceeded 100ms: {stats['mean']:.2f}ms"
            )
E           AssertionError: Sort by name (asc) exceeded 100ms: 223.95ms
E           assert 223.94886133333122 <= 100

tests/test_search/test_sorting_performance.py:109: AssertionError
_____________________ TestUIIntegration.test_app_lifecycle _____________________

self = <MagicMock name='mock.makeKeyAndOrderFront_' id='4560662480'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'makeKeyAndOrderFront_' to have been called once. Called 0 times.

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:886: AssertionError

During handling of the above exception, another exception occurred:

self = <test_ui_integration.TestUIIntegration object at 0x10e07d430>
mock_shared_app = <MagicMock name='sharedApplication' id='4851881152'>
mock_nsapp = <MagicMock name='NSApp' id='4851829872'>

    @patch("AppKit.NSApp")
    @patch("AppKit.NSApplication.sharedApplication")
    def test_app_lifecycle(self, mock_shared_app, mock_nsapp) -> None:
        """Test the show method of FileSearchApp."""
        mock_app = MagicMock()
        mock_shared_app.return_value = mock_app
        app = FileSearchApp()
        app._window = MagicMock()
        app.show()
>       app._window.makeKeyAndOrderFront_.assert_called_once()
E       AssertionError: Expected 'makeKeyAndOrderFront_' to have been called once. Called 0 times.

tests/ui/test_ui_integration.py:146: AssertionError
----------------------------- Captured stdout call -----------------------------
PyObjC not available - UI features disabled
Cannot show UI - PyObjC not available
____________ TestUIComponentIntegration.test_component_integration _____________

self = <test_ui_integration.TestUIComponentIntegration object at 0x10e07d8e0>
mock_table_alloc = <MagicMock name='alloc' id='4562541632'>
mock_segment_alloc = <MagicMock name='alloc' id='4562459232'>
mock_search_alloc = <MagicMock name='alloc' id='4562598016'>
mock_shared_app = <MagicMock name='sharedApplication' id='4562524144'>
mock_nsapp = <MagicMock name='NSApp' id='4562007520'>

    @patch("AppKit.NSApp")
    @patch("AppKit.NSApplication.sharedApplication")
    @patch("AppKit.NSSearchField.alloc")
    @patch("AppKit.NSSegmentedControl.alloc")
    @patch("AppKit.NSTableView.alloc")
    def test_component_integration(
        self,
        mock_table_alloc,
        mock_segment_alloc,
        mock_search_alloc,
        mock_shared_app,
        mock_nsapp,
    ) -> None:
        """Test UI component instantiation and delegate setup."""
        mock_search_field = MagicMock()
        mock_search_alloc.return_value.init.return_value = mock_search_field
        mock_segment_control = MagicMock()
        mock_segment_alloc.return_value.init.return_value = mock_segment_control
        mock_table_view = MagicMock()
        mock_table_alloc.return_value.init.return_value = mock_table_view
        app = FileSearchApp()
        # Test that the wrappers were instantiated
>       assert hasattr(app, "_search_field")
E       AssertionError: assert False
E        +  where False = hasattr(<panoptikon.ui.macos_app.FileSearchApp object at 0x10fe87ac0>, '_search_field')

tests/ui/test_ui_integration.py:184: AssertionError
----------------------------- Captured stdout call -----------------------------
PyObjC not available - UI features disabled
_______________ TestUIEventIntegration.test_ui_event_integration _______________

self = <MagicMock name='mock.makeKeyAndOrderFront_' id='4561406896'>

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'makeKeyAndOrderFront_' to have been called once. Called 0 times.

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:886: AssertionError

During handling of the above exception, another exception occurred:

self = <test_ui_integration.TestUIEventIntegration object at 0x10e07dd90>
mock_shared_app = <MagicMock name='sharedApplication' id='4561383632'>
mock_nsapp = <MagicMock name='NSApp' id='4561521968'>

    @patch("AppKit.NSApp")
    @patch("AppKit.NSApplication.sharedApplication")
    def test_ui_event_integration(self, mock_shared_app, mock_nsapp) -> None:
        """Test that show does not error when PyObjC is available."""
        mock_app = MagicMock()
        mock_shared_app.return_value = mock_app
        app = FileSearchApp()
        app._window = MagicMock()
        app.show()
>       app._window.makeKeyAndOrderFront_.assert_called_once()
E       AssertionError: Expected 'makeKeyAndOrderFront_' to have been called once. Called 0 times.

tests/ui/test_ui_integration.py:209: AssertionError
----------------------------- Captured stdout call -----------------------------
PyObjC not available - UI features disabled
Cannot show UI - PyObjC not available
________________ TestUIFileSystemIntegration.test_file_display _________________

self = <test_ui_integration.TestUIFileSystemIntegration object at 0x10e09c280>
mock_shared_app = <MagicMock name='sharedApplication' id='4561020000'>
mock_nsapp = <MagicMock name='NSApp' id='4849639680'>

    @patch("AppKit.NSApp")
    @patch("AppKit.NSApplication.sharedApplication")
    def test_file_display(self, mock_shared_app, mock_nsapp) -> None:
        """Test display of filesystem items in the UI."""
        # Create app
        app = FileSearchApp()
    
        # Setup test files
        test_files = [
            str(Path("/test/dir1/file1.txt")),
            str(Path("/test/dir1/file2.txt")),
            str(Path("/test/dir2/file3.txt")),
        ]
    
        # Set files
        app.set_files(test_files)
    
        # Test basic search
>       app.search("file1")
E       AttributeError: 'FileSearchApp' object has no attribute 'search'

tests/ui/test_ui_integration.py:243: AttributeError
----------------------------- Captured stdout call -----------------------------
PyObjC not available - UI features disabled
_______________ TestFileSearchAppMocked.test_app_initialization ________________

args = (<test_ui_integration.TestFileSearchAppMocked object at 0x10e09c760>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1333: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../.pyenv/versions/3.9.18/lib/python3.9/contextlib.py:119: in __enter__
    return next(self.gen)
../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1315: in decoration_helper
    arg = exit_stack.enter_context(patching)
../../../.pyenv/versions/3.9.18/lib/python3.9/contextlib.py:448: in enter_context
    result = _cm_type.__enter__(cm)
../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1404: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x10e08ba90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'panoptikon.ui.macos_app' from '/Users/james/Documents/GitHub/panoptikon/src/panoptikon/ui/macos_app.py'> does not have the attribute 'Foundation'

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1377: AttributeError
_____________ TestFileSearchAppMocked.test_file_loading_and_search _____________

args = (<test_ui_integration.TestFileSearchAppMocked object at 0x10e09c970>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1333: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../.pyenv/versions/3.9.18/lib/python3.9/contextlib.py:119: in __enter__
    return next(self.gen)
../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1315: in decoration_helper
    arg = exit_stack.enter_context(patching)
../../../.pyenv/versions/3.9.18/lib/python3.9/contextlib.py:448: in enter_context
    result = _cm_type.__enter__(cm)
../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1404: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x10e08be20>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'panoptikon.ui.macos_app' from '/Users/james/Documents/GitHub/panoptikon/src/panoptikon/ui/macos_app.py'> does not have the attribute 'Foundation'

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1377: AttributeError
___________ TestFileSearchAppMocked.test_ui_delegates_and_datasource ___________

args = (<test_ui_integration.TestFileSearchAppMocked object at 0x10e09cb80>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1333: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../.pyenv/versions/3.9.18/lib/python3.9/contextlib.py:119: in __enter__
    return next(self.gen)
../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1315: in decoration_helper
    arg = exit_stack.enter_context(patching)
../../../.pyenv/versions/3.9.18/lib/python3.9/contextlib.py:448: in enter_context
    result = _cm_type.__enter__(cm)
../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1404: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x10e0911c0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'panoptikon.ui.macos_app' from '/Users/james/Documents/GitHub/panoptikon/src/panoptikon/ui/macos_app.py'> does not have the attribute 'Foundation'

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1377: AttributeError
________________ TestSearchIntegration.test_search_capabilities ________________

args = (<test_ui_integration.TestSearchIntegration object at 0x10e09cfd0>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1333: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../.pyenv/versions/3.9.18/lib/python3.9/contextlib.py:119: in __enter__
    return next(self.gen)
../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1315: in decoration_helper
    arg = exit_stack.enter_context(patching)
../../../.pyenv/versions/3.9.18/lib/python3.9/contextlib.py:448: in enter_context
    result = _cm_type.__enter__(cm)
../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1404: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x10e091580>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'panoptikon.ui.macos_app' from '/Users/james/Documents/GitHub/panoptikon/src/panoptikon/ui/macos_app.py'> does not have the attribute 'Foundation'

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1377: AttributeError
_________________ TestEventBusIntegration.test_event_handling __________________

args = (<test_ui_integration.TestEventBusIntegration object at 0x10e0a3580>,)
keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1333: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../.pyenv/versions/3.9.18/lib/python3.9/contextlib.py:119: in __enter__
    return next(self.gen)
../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1315: in decoration_helper
    arg = exit_stack.enter_context(patching)
../../../.pyenv/versions/3.9.18/lib/python3.9/contextlib.py:448: in enter_context
    result = _cm_type.__enter__(cm)
../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1404: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x10e091970>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'panoptikon.ui.macos_app' from '/Users/james/Documents/GitHub/panoptikon/src/panoptikon/ui/macos_app.py'> does not have the attribute 'Foundation'

../../../.pyenv/versions/3.9.18/lib/python3.9/unittest/mock.py:1377: AttributeError
=============================== warnings summary ===============================
tests/conftest.py:24
  /Users/james/Documents/GitHub/panoptikon/tests/conftest.py:24: PytestCollectionWarning: cannot collect test class 'TestConfigSection' because it has a __init__ constructor (from: tests/core/test_bootstrap.py)
    class TestConfigSection(ConfigSection):

tests/conftest.py:24
  /Users/james/Documents/GitHub/panoptikon/tests/conftest.py:24: PytestCollectionWarning: cannot collect test class 'TestConfigSection' because it has a __init__ constructor (from: tests/core/test_config.py)
    class TestConfigSection(ConfigSection):

tests/conftest.py:24
  /Users/james/Documents/GitHub/panoptikon/tests/conftest.py:24: PytestCollectionWarning: cannot collect test class 'TestConfigSection' because it has a __init__ constructor (from: tests/core/test_config_hot_reload.py)
    class TestConfigSection(ConfigSection):

tests/core/test_events.py:26
  /Users/james/Documents/GitHub/panoptikon/tests/core/test_events.py:26: PytestCollectionWarning: cannot collect test class 'TestEvent' because it has a __init__ constructor (from: tests/core/test_events.py)
    @dataclass

tests/core/test_events.py:34
  /Users/james/Documents/GitHub/panoptikon/tests/core/test_events.py:34: PytestCollectionWarning: cannot collect test class 'TestEventHandler' because it has a __init__ constructor (from: tests/core/test_events.py)
    class TestEventHandler(EventHandler[TestEvent]):

tests/core/test_events.py:46
  /Users/james/Documents/GitHub/panoptikon/tests/core/test_events.py:46: PytestCollectionWarning: cannot collect test class 'TestAsyncEventHandler' because it has a __init__ constructor (from: tests/core/test_events.py)
    class TestAsyncEventHandler(AsyncEventHandler[TestEvent]):

tests/core/test_events.py:58
  /Users/james/Documents/GitHub/panoptikon/tests/core/test_events.py:58: PytestCollectionWarning: cannot collect test class 'TestErrorEventHandler' because it has a __init__ constructor (from: tests/core/test_events.py)
    class TestErrorEventHandler(EventHandler[ErrorEvent]):

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================ tests coverage ================================
_______________ coverage: platform darwin, python 3.9.18-final-0 _______________

Name                                             Stmts   Miss  Cover   Missing
------------------------------------------------------------------------------
src/panoptikon/__init__.py                           1      0   100%
src/panoptikon/__main__.py                          34      0   100%
src/panoptikon/benchmark/__init__.py                 0      0   100%
src/panoptikon/benchmark/sorting_benchmark.py       21      0   100%
src/panoptikon/core/__init__.py                      0      0   100%
src/panoptikon/core/config.py                      246     37    85%   73-82, 196, 248, 301-305, 324, 355, 384, 401-402, 442, 510-513, 519-525, 550, 566, 630, 662-669, 677-678
src/panoptikon/core/errors.py                      179     21    88%   128, 134, 312, 395, 442, 461-462, 489, 491, 493, 496-497, 511-512, 522-523, 586, 600, 608, 612, 623
src/panoptikon/core/events.py                      169      9    95%   63, 344, 434, 439, 453, 458, 462-466
src/panoptikon/core/lifecycle.py                   135      7    95%   223, 359-362, 367-368
src/panoptikon/core/service.py                     108      5    95%   125-129, 247, 310-311
src/panoptikon/core/service_extensions.py            7      0   100%
src/panoptikon/database/__init__.py                 18      0   100%
src/panoptikon/database/config.py                   54      6    89%   65, 84, 102, 120, 142, 144
src/panoptikon/database/connection.py              122     30    75%   81-82, 124-125, 197, 199, 205-211, 247, 265-267, 275-287, 296-298, 306
src/panoptikon/database/optimization.py             37      2    95%   48, 104
src/panoptikon/database/performance_monitor.py      27      6    78%   48, 67-73, 77, 81
src/panoptikon/database/pool.py                    341     59    83%   85, 100, 233-234, 254-261, 322-332, 413, 423-425, 430-431, 438, 463-469, 494-498, 565-566, 589-593, 675, 734, 752, 777-805
src/panoptikon/database/pool_service.py            136     22    84%   71, 101, 105-117, 128, 155, 193, 245, 247, 253-259, 295
src/panoptikon/database/query_builder.py            33      0   100%
src/panoptikon/database/schema.py                  239     53    78%   150-153, 174-177, 268, 332, 351, 377, 380-381, 415-416, 421-422, 426-427, 454-458, 485, 492, 501-502, 514, 524-525, 565-567, 577-597, 601-602, 612-616, 627, 638
src/panoptikon/database/service.py                  76      6    92%   56, 79, 86-87, 107-108
src/panoptikon/database/statement_registry.py       43      1    98%   86
src/panoptikon/filesystem/__init__.py                7      0   100%
src/panoptikon/filesystem/access.py                288     50    83%   223, 258-260, 281-282, 303-304, 318, 327-332, 347, 357-358, 372, 451, 469, 478, 549-551, 652-656, 670-674, 694, 699-700, 724, 730-731, 751, 756-757, 759-760, 780, 785-786, 811, 820, 825-827, 830, 833-834
src/panoptikon/filesystem/bookmarks.py             214     42    80%   29-31, 63-64, 93-94, 97-98, 139-144, 157, 183-190, 195-201, 210-214, 223, 242-243, 292, 337-338, 350, 405-407, 420, 449-450, 453-455
src/panoptikon/filesystem/cloud.py                 139     12    91%   74, 88, 95, 102, 114, 121, 215-221, 287
src/panoptikon/filesystem/events.py                107      3    97%   164, 205, 282
src/panoptikon/filesystem/paths.py                 106     12    89%   78-80, 174, 285-302
src/panoptikon/filesystem/watcher.py               296     77    74%   22, 109-113, 117-128, 132-139, 148-186, 194-202, 213, 221, 341-342, 354, 390-391, 403-404, 446-449, 457, 608-610, 618-620, 628, 636, 653
src/panoptikon/search/__init__.py                    3      0   100%
src/panoptikon/search/filtering.py                 101     16    84%   87, 92, 99-100, 118, 123, 138, 155, 168, 205-218
src/panoptikon/search/query_parser.py               63      3    95%   131-132, 138
src/panoptikon/search/result.py                     96     12    88%   17, 22, 27, 31, 63, 67, 71, 77, 131-132, 156, 166
src/panoptikon/search/search_engine.py             109     24    78%   57-83, 179-192, 205-206, 244-248, 284-285, 322-325
src/panoptikon/search/sorting.py                    93     31    67%   57, 61-69, 81, 97, 101-109, 132, 142, 167-169, 191, 200, 208-210
src/panoptikon/typings/__init__.py                   0      0   100%
src/panoptikon/ui/__init__.py                        0      0   100%
src/panoptikon/ui/events.py                         77     77     0%   1-167
src/panoptikon/ui/macos_app.py                     128     26    80%   36, 44, 88, 141, 231, 239, 250, 265-268, 283-286, 293, 301, 309-312, 320-325
src/panoptikon/ui/objc_wrappers.py                  82     10    88%   34, 55, 95-98, 132, 162, 180, 219-221
src/panoptikon/ui/validators.py                     37      1    97%   149
src/panoptikon/ui/window_interfaces.py              32     32     0%   1-70
src/panoptikon/utils/__init__.py                     0      0   100%
------------------------------------------------------------------------------
TOTAL                                             4004    692    83%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml
Required test coverage of 80% reached. Total coverage: 82.72%
=========================== short test summary info ============================
FAILED tests/core/test_sorting.py::test_sort_by_size_asc - AssertionError: as...
FAILED tests/core/test_sorting.py::test_sort_by_size_desc - AssertionError: a...
FAILED tests/core/test_sorting.py::test_sort_by_folder_size_asc - AssertionEr...
FAILED tests/core/test_sorting.py::test_sort_by_folder_size_desc - AssertionE...
FAILED tests/core/test_sorting_benchmark.py::test_sorting_performance_mock_data[10000]
FAILED tests/test_search/test_sorting_performance.py::test_sorting_performance_live
FAILED tests/ui/test_ui_integration.py::TestUIIntegration::test_app_lifecycle
FAILED tests/ui/test_ui_integration.py::TestUIComponentIntegration::test_component_integration
FAILED tests/ui/test_ui_integration.py::TestUIEventIntegration::test_ui_event_integration
FAILED tests/ui/test_ui_integration.py::TestUIFileSystemIntegration::test_file_display
FAILED tests/ui/test_ui_integration.py::TestFileSearchAppMocked::test_app_initialization
FAILED tests/ui/test_ui_integration.py::TestFileSearchAppMocked::test_file_loading_and_search
FAILED tests/ui/test_ui_integration.py::TestFileSearchAppMocked::test_ui_delegates_and_datasource
FAILED tests/ui/test_ui_integration.py::TestSearchIntegration::test_search_capabilities
FAILED tests/ui/test_ui_integration.py::TestEventBusIntegration::test_event_handling
======= 15 failed, 362 passed, 4 skipped, 7 warnings in 95.21s (0:01:35) =======
