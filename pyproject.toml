[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "panoptikon"
version = "0.1.0"
description = "A high-performance file search application inspired by Windows 'Everything'"
readme = "README.md"
authors = [
    {name = "Panoptikon Team", email = "example@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
]
requires-python = ">=3.9"
dependencies = [
    "sqlalchemy>=2.0.0",
    "watchdog>=3.0.0",
    "pyobjc==11.0; platform_system=='Darwin'",
    "click>=8.1.3",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.3.0",
    "ruff>=0.0.262",
    "mypy>=1.3.0",
    "pytest>=7.3.1",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pre-commit>=3.3.2",
    "pip-tools>=7.0.0",
    "bandit>=1.7.5",
]
docs = [
    "sphinx>=6.1.3",
    "sphinx-rtd-theme>=1.2.0",
]

[project.urls]
"Homepage" = "https://github.com/user/panoptikon"
"Bug Tracker" = "https://github.com/user/panoptikon/issues"

[project.scripts]
panoptikon = "panoptikon.__main__:main"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
plugins = ["pydantic.mypy"]
mypy_path = ["src/panoptikon/typings"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_missing_imports = true
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

# Ignore PyObjC related imports in type checking
[[tool.mypy.overrides]]
module = "objc"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "Foundation"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "AppKit"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "Cocoa"
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",
    "F",
    "B",
    "I",
    "D",
    "UP",
    "N",
    "C4",
    "SIM",
]
ignore = ["E203", "D203", "D213"]
fixable = ["ALL"]
mccabe = { max-complexity = 10 }
pydocstyle = { convention = "google" }

[tool.ruff.lint.per-file-ignores]
"*.pyi" = ["ALL"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = ["panoptikon"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "--strict-markers --cov=src/panoptikon --cov-report=term --cov-report=html --cov-report=xml --cov-fail-under=80"
markers = [
    "unit: marks test as a unit test",
    "integration: marks test as an integration test",
    "slow: marks test as slow",
    "asyncio: marks test as an asyncio test",
]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src/panoptikon"]
omit = ["*/tests/*", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
fail_under = 80

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true 