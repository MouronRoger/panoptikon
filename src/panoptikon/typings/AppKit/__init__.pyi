"""Type stubs for AppKit framework."""

from typing import Any, List

# Window style mask constants
NSWindowStyleMaskTitled: int
NSWindowStyleMaskClosable: int
NSWindowStyleMaskMiniaturizable: int
NSWindowStyleMaskResizable: int
NSWindowStyleMaskUtilityWindow: int
NSWindowStyleMaskDocModalWindow: int
NSWindowStyleMaskNonactivatingPanel: int
NSWindowStyleMaskHUDWindow: int

# Backing store constants
NSBackingStoreRetained: int
NSBackingStoreNonretained: int
NSBackingStoreBuffered: int

# View autoresizing constants
NSViewWidthSizable: int
NSViewHeightSizable: int
NSViewMinXMargin: int
NSViewMaxXMargin: int
NSViewMinYMargin: int
NSViewMaxYMargin: int

# Border types
NSNoBorder: int
NSLineBorder: int
NSBezelBorder: int
NSGrooveBorder: int

# Control size constants
NSControlSizeRegular: int
NSControlSizeSmall: int
NSControlSizeMini: int

# Segmented control constants
NSSegmentStyleRounded: int
NSSegmentStyleTexturedRounded: int
NSSegmentStyleRoundRect: int
NSSegmentStyleTexturedSquare: int
NSSegmentStyleCapsule: int
NSSegmentStyleSmallSquare: int
NSSegmentStyleSeparated: int

# Font constants
NSFontWeightRegular: float
NSFontWeightBold: float
NSFontWeightLight: float
NSFontWeightMedium: float

class NSObject:
    """Base class for all Objective-C objects."""

    @classmethod
    def alloc(cls) -> "NSObject": ...
    def init(self) -> "NSObject": ...
    def setDelegate_(self, delegate: Any) -> None: ...
    def delegate(self) -> Any: ...
    def performSelector_withObject_(self, selector: str, object: Any) -> Any: ...
    def performSelectorOnMainThread_withObject_waitUntilDone_(
        self, selector: str, object: Any, wait: bool
    ) -> None: ...

class NSApplication(NSObject):
    """The main application class for AppKit applications."""

    @classmethod
    def sharedApplication(cls) -> "NSApplication": ...
    def run(self) -> None: ...
    def terminate_(self, sender: Any) -> None: ...
    def activateIgnoringOtherApps_(self, ignore: bool) -> None: ...
    def setDelegate_(self, delegate: Any) -> None: ...
    def delegate(self) -> Any: ...
    def mainMenu(self) -> "NSMenu": ...
    def setMainMenu_(self, menu: "NSMenu") -> None: ...
    def windows(self) -> List["NSWindow"]: ...
    def mainWindow(self) -> "NSWindow": ...
    def keyWindow(self) -> "NSWindow": ...

class NSWindow(NSObject):
    """Window class."""

    def initWithContentRect_styleMask_backing_defer_(
        self,
        contentRect: Any,
        style: int,
        backingStoreType: int,
        defer: bool,
    ) -> "NSWindow": ...
    def setTitle_(self, title: str) -> None: ...
    def title(self) -> str: ...
    def contentView(self) -> "NSView": ...
    def setContentView_(self, view: "NSView") -> None: ...
    def makeKeyAndOrderFront_(self, sender: Any) -> None: ...
    def orderOut_(self, sender: Any) -> None: ...
    def close(self) -> None: ...
    def setReleasedWhenClosed_(self, released: bool) -> None: ...
    def setOpaque_(self, opaque: bool) -> None: ...
    def setAlphaValue_(self, alpha: float) -> None: ...
    def setBackgroundColor_(self, color: "NSColor") -> None: ...
    def center(self) -> None: ...

class NSRunLoop(NSObject):
    """Run loop class for event processing."""

    @classmethod
    def currentRunLoop(cls) -> "NSRunLoop": ...
    @classmethod
    def mainRunLoop(cls) -> "NSRunLoop": ...
    def getCFRunLoop(self) -> Any: ...

class NSControl(NSObject):
    """Base class for controls in AppKit."""

    def initWithFrame_(self, frame: Any) -> "NSControl": ...
    def setTarget_(self, target: Any) -> None: ...
    def setAction_(self, action: Any) -> None: ...
    def target(self) -> Any: ...
    def action(self) -> Any: ...
    def setEnabled_(self, enabled: bool) -> None: ...
    def isEnabled(self) -> bool: ...
    def setHidden_(self, hidden: bool) -> None: ...
    def isHidden(self) -> bool: ...
    def sizeToFit(self) -> None: ...

class NSView(NSObject):
    """Base class for views in AppKit."""

    def initWithFrame_(self, frame: Any) -> "NSView": ...
    def addSubview_(self, view: "NSView") -> None: ...
    def removeFromSuperview(self) -> None: ...
    def setAutoresizingMask_(self, mask: int) -> None: ...
    def autoresizingMask(self) -> int: ...
    def setFrame_(self, frame: Any) -> None: ...
    def frame(self) -> Any: ...
    def bounds(self) -> Any: ...
    def setBounds_(self, bounds: Any) -> None: ...
    def setHidden_(self, hidden: bool) -> None: ...
    def isHidden(self) -> bool: ...
    def setWantsLayer_(self, wants: bool) -> None: ...
    def wantsLayer(self) -> bool: ...
    def layer(self) -> Any: ...
    def superview(self) -> "NSView": ...
    def subviews(self) -> List["NSView"]: ...
    def window(self) -> "NSWindow": ...

class NSSearchField(NSControl):
    """Search field control in AppKit."""

    def initWithFrame_(self, frame: Any) -> "NSSearchField": ...
    def cell(self) -> "NSSearchFieldCell": ...
    def setStringValue_(self, value: str) -> None: ...
    def stringValue(self) -> str: ...
    def setPlaceholderString_(self, placeholder: str) -> None: ...
    def placeholderString(self) -> str: ...
    def setContinuous_(self, continuous: bool) -> None: ...
    def isContinuous(self) -> bool: ...

class NSSearchFieldCell(NSObject):
    """Cell for NSSearchField."""

    def setPlaceholderString_(self, placeholder: str) -> None: ...
    def placeholderString(self) -> str: ...
    def setCancelButtonCell_(self, cell: Any) -> None: ...
    def cancelButtonCell(self) -> Any: ...
    def setSearchButtonCell_(self, cell: Any) -> None: ...
    def searchButtonCell(self) -> Any: ...

class NSTableView(NSControl):
    """Table view control in AppKit."""

    def initWithFrame_(self, frame: Any) -> "NSTableView": ...
    def addTableColumn_(self, column: "NSTableColumn") -> None: ...
    def removeTableColumn_(self, column: "NSTableColumn") -> None: ...
    def tableColumns(self) -> List["NSTableColumn"]: ...
    def setDataSource_(self, dataSource: Any) -> None: ...
    def dataSource(self) -> Any: ...
    def setDelegate_(self, delegate: Any) -> None: ...
    def delegate(self) -> Any: ...
    def reloadData(self) -> None: ...
    def numberOfRows(self) -> int: ...
    def selectedRow(self) -> int: ...
    def selectedRows(self) -> Any: ...  # NSIndexSet
    def selectRowIndexes_byExtendingSelection_(
        self, indexes: Any, extend: bool
    ) -> None: ...
    def deselectAll_(self, sender: Any) -> None: ...
    def setAllowsMultipleSelection_(self, allow: bool) -> None: ...
    def allowsMultipleSelection(self) -> bool: ...
    def setAllowsColumnReordering_(self, allow: bool) -> None: ...
    def allowsColumnReordering(self) -> bool: ...
    def setGridStyleMask_(self, gridStyle: int) -> None: ...
    def gridStyleMask(self) -> int: ...
    def setUsesAlternatingRowBackgroundColors_(self, uses: bool) -> None: ...
    def usesAlternatingRowBackgroundColors(self) -> bool: ...

class NSTableColumn(NSObject):
    """Column for NSTableView."""

    def initWithIdentifier_(self, identifier: str) -> "NSTableColumn": ...
    def setWidth_(self, width: float) -> None: ...
    def width(self) -> float: ...
    def setMinWidth_(self, width: float) -> None: ...
    def minWidth(self) -> float: ...
    def setMaxWidth_(self, width: float) -> None: ...
    def maxWidth(self) -> float: ...
    def headerCell(self) -> "NSTableHeaderCell": ...
    def setHeaderCell_(self, cell: "NSTableHeaderCell") -> None: ...
    def identifier(self) -> str: ...
    def setIdentifier_(self, identifier: str) -> None: ...
    def setResizingMask_(self, mask: int) -> None: ...
    def resizingMask(self) -> int: ...

class NSTableHeaderCell(NSObject):
    """Header cell for NSTableColumn."""

    def setStringValue_(self, value: str) -> None: ...
    def stringValue(self) -> str: ...
    def setAlignment_(self, alignment: int) -> None: ...
    def alignment(self) -> int: ...

class NSScrollView(NSView):
    """Scroll view container in AppKit."""

    def initWithFrame_(self, frame: Any) -> "NSScrollView": ...
    def setHasVerticalScroller_(self, has: bool) -> None: ...
    def hasVerticalScroller(self) -> bool: ...
    def setHasHorizontalScroller_(self, has: bool) -> None: ...
    def hasHorizontalScroller(self) -> bool: ...
    def setBorderType_(self, type: int) -> None: ...
    def borderType(self) -> int: ...
    def setDocumentView_(self, view: NSView) -> None: ...
    def documentView(self) -> NSView: ...
    def contentView(self) -> NSView: ...
    def verticalScroller(self) -> "NSScroller": ...
    def horizontalScroller(self) -> "NSScroller": ...

class NSSegmentedControl(NSControl):
    """Segmented control in AppKit."""

    def initWithFrame_(self, frame: Any) -> "NSSegmentedControl": ...
    def setSegmentCount_(self, count: int) -> None: ...
    def segmentCount(self) -> int: ...
    def setLabel_forSegment_(self, label: str, segment: int) -> None: ...
    def labelForSegment_(self, segment: int) -> str: ...
    def setWidth_forSegment_(self, width: float, segment: int) -> None: ...
    def widthForSegment_(self, segment: int) -> float: ...
    def setSelectedSegment_(self, segment: int) -> None: ...
    def selectedSegment(self) -> int: ...
    def setTrackingMode_(self, mode: int) -> None: ...
    def trackingMode(self) -> int: ...
    def setSegmentStyle_(self, style: int) -> None: ...
    def segmentStyle(self) -> int: ...
    def sizeToFit(self) -> None: ...
    def setEnabled_forSegment_(self, enabled: bool, segment: int) -> None: ...
    def isEnabledForSegment_(self, segment: int) -> bool: ...

class NSMenu(NSObject):
    """Menu class for application menus."""

    def initWithTitle_(self, title: str) -> "NSMenu": ...
    def addItem_(self, item: "NSMenuItem") -> None: ...
    def insertItem_atIndex_(self, item: "NSMenuItem", index: int) -> None: ...
    def removeItem_(self, item: "NSMenuItem") -> None: ...
    def removeItemAtIndex_(self, index: int) -> None: ...
    def itemAtIndex_(self, index: int) -> "NSMenuItem": ...
    def numberOfItems(self) -> int: ...
    def setAutoenablesItems_(self, autoEnables: bool) -> None: ...
    def autoenablesItems(self) -> bool: ...

class NSMenuItem(NSObject):
    """Menu item for NSMenu."""

    def initWithTitle_action_keyEquivalent_(
        self, title: str, action: Any, keyEquiv: str
    ) -> "NSMenuItem": ...
    def setTarget_(self, target: Any) -> None: ...
    def target(self) -> Any: ...
    def setAction_(self, action: Any) -> None: ...
    def action(self) -> Any: ...
    def setEnabled_(self, enabled: bool) -> None: ...
    def isEnabled(self) -> bool: ...
    def setSubmenu_(self, submenu: NSMenu) -> None: ...
    def submenu(self) -> NSMenu: ...

class NSColor(NSObject):
    """Color class."""

    @classmethod
    def colorWithRed_green_blue_alpha_(
        cls, red: float, green: float, blue: float, alpha: float
    ) -> "NSColor": ...
    @classmethod
    def colorWithCalibratedRed_green_blue_alpha_(
        cls, red: float, green: float, blue: float, alpha: float
    ) -> "NSColor": ...
    @classmethod
    def blackColor(cls) -> "NSColor": ...
    @classmethod
    def darkGrayColor(cls) -> "NSColor": ...
    @classmethod
    def lightGrayColor(cls) -> "NSColor": ...
    @classmethod
    def whiteColor(cls) -> "NSColor": ...
    @classmethod
    def grayColor(cls) -> "NSColor": ...
    @classmethod
    def redColor(cls) -> "NSColor": ...
    @classmethod
    def greenColor(cls) -> "NSColor": ...
    @classmethod
    def blueColor(cls) -> "NSColor": ...
    @classmethod
    def cyanColor(cls) -> "NSColor": ...
    @classmethod
    def yellowColor(cls) -> "NSColor": ...
    @classmethod
    def magentaColor(cls) -> "NSColor": ...
    @classmethod
    def orangeColor(cls) -> "NSColor": ...
    @classmethod
    def purpleColor(cls) -> "NSColor": ...
    @classmethod
    def brownColor(cls) -> "NSColor": ...
    @classmethod
    def clearColor(cls) -> "NSColor": ...

class NSFont(NSObject):
    """Font class."""

    @classmethod
    def systemFontOfSize_(cls, size: float) -> "NSFont": ...
    @classmethod
    def boldSystemFontOfSize_(cls, size: float) -> "NSFont": ...
    @classmethod
    def fontWithName_size_(cls, name: str, size: float) -> "NSFont": ...
    def fontName(self) -> str: ...
    def pointSize(self) -> float: ...

# --- Added for mypy compatibility ---
class NSScroller(NSView):
    """Stub for NSScroller (scroll bar) in AppKit."""

    pass
